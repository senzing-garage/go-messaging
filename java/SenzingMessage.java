// Code generated by jtd-codegen for Java + Jackson v0.2.1

package com.senzing.schema;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

@JsonSerialize
public class SenzingMessage {
    @JsonProperty("code")
    private String code;

    @JsonProperty("details")
    private Details details;

    @JsonProperty("duration")
    private Integer duration;

    @JsonProperty("errors")
    private Errors errors;

    @JsonProperty("id")
    private String id;

    @JsonProperty("level")
    private String level;

    @JsonProperty("location")
    private String location;

    @JsonProperty("reason")
    private String reason;

    @JsonProperty("status")
    private String status;

    @JsonProperty("text")
    private String text;

    @JsonProperty("time")
    private OffsetDateTime time;

    public SenzingMessage() {
    }

    /**
     * Getter for code.<p>
     * Code for message.
     */
    public String getCode() {
        return code;
    }

    /**
     * Setter for code.<p>
     * Code for message.
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Getter for details.<p>
     * A list of objects sent to the message generator.
     */
    public Details getDetails() {
        return details;
    }

    /**
     * Setter for details.<p>
     * A list of objects sent to the message generator.
     */
    public void setDetails(Details details) {
        this.details = details;
    }

    /**
     * Getter for duration.<p>
     * Time duration reported by the message.
     */
    public Integer getDuration() {
        return duration;
    }

    /**
     * Setter for duration.<p>
     * Time duration reported by the message.
     */
    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    /**
     * Getter for errors.<p>
     * A list of errors.  Usually a stack of errors.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Setter for errors.<p>
     * A list of errors.  Usually a stack of errors.
     */
    public void setErrors(Errors errors) {
        this.errors = errors;
    }

    /**
     * Getter for id.<p>
     * The unique identification of the message.
     */
    public String getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     * The unique identification of the message.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for level.<p>
     * Log level.  Possible values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL,
     * or PANIC.
     */
    public String getLevel() {
        return level;
    }

    /**
     * Setter for level.<p>
     * Log level.  Possible values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL,
     * or PANIC.
     */
    public void setLevel(String level) {
        this.level = level;
    }

    /**
     * Getter for location.<p>
     * Location in the code identifying where the message was generated.
     */
    public String getLocation() {
        return location;
    }

    /**
     * Setter for location.<p>
     * Location in the code identifying where the message was generated.
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Getter for reason.<p>
     * Reason for message.
     */
    public String getReason() {
        return reason;
    }

    /**
     * Setter for reason.<p>
     * Reason for message.
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Getter for status.<p>
     * User-defined status of message.
     */
    public String getStatus() {
        return status;
    }

    /**
     * Setter for status.<p>
     * User-defined status of message.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for text.<p>
     * Text representation of the message.
     */
    public String getText() {
        return text;
    }

    /**
     * Setter for text.<p>
     * Text representation of the message.
     */
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Getter for time.<p>
     * Time message was generated in RFC3339 format.
     */
    public OffsetDateTime getTime() {
        return time;
    }

    /**
     * Setter for time.<p>
     * Time message was generated in RFC3339 format.
     */
    public void setTime(OffsetDateTime time) {
        this.time = time;
    }
}
